<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO.Ports" #>
using System.Configuration;

sealed class GlobalSettings : ApplicationSettingsBase
{
<#
var settings = _settings;
foreach (var fields in settings.GetType().GetFields())
{
    var setting = fields.GetValue(settings);
    var name = fields.Name;
    var type = setting
        .GetType()
        .GetField(nameof(Settings.Setting<string>.Value))
        .FieldType;
    var value = setting
        .GetType()
        .GetField(nameof(Settings.Setting<string>.Value))
        .GetValue(setting)
        .ToString();                
            
#>
	[UserScopedSetting()]
    [DefaultSettingValue("<#= value #>")]
    public <#= type #> <#= name #>
    {
        get => (<#= type #>)this[nameof(<#= name #>)];
        set => this[nameof(<#= name #>)] = value;
    }
<#
}
#>
}

<#+

public class Settings
{
    public struct Setting<T>
    {
        public string Description;
        public T Value;
    }

    public Setting<string> PortName = new() { Description = "Port", Value = "COM1" };
    public Setting<int> BaudRate = new() { Description = "BaudRate", Value = 9600 };
    public Setting<string> Parity = new() { Description = "Parity", Value = "None" };
    public Setting<int> DataBits = new() { Description = "DataBits", Value = 8 };
    public Setting<string> StopBits = new() { Description = "StopBits", Value = "One" };
    public Setting<string> Handshake = new() { Description = "Handshake", Value = "None" };
    public Setting<string> Format = new() { Description = "Format Receive", Value = "ASCII" };
    public Setting<int> BytesPerLine = new() { Description = "Bytes per line", Value = 500 };
}  

public Settings _settings = new();
  
#>